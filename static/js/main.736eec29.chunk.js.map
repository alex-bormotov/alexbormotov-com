{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useEffect","loadCSS","document","querySelector","className","Divider","src","logo","alt","Typography","component","Box","fontFamily","fontSize","m","display","Link","href","color","Icon","Button","disabled","variant","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.736eec29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f5048e9b.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { loadCSS } from 'fg-loadcss';\nimport Icon from '@material-ui/core/Icon';\nimport Link from '@material-ui/core/Link';\nimport Divider from '@material-ui/core/Divider';\n\n\nfunction App() {\n\n    React.useEffect(() => {\n      loadCSS(\n        'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n        document.querySelector('#font-awesome-css'),\n      );\n    }, []);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <Divider />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n           <Typography component=\"div\">\n              <Box fontFamily=\"Monospace\" fontSize=\"h4.fontSize\" m={1}>\n                Hi there :)\n              </Box>\n              <Divider />\n              <Box fontFamily=\"Monospace\" fontSize=\"h3.fontSize\" m={1}>\n                I'm Alex, Software Engineer\n              </Box>\n              <Divider />\n              <Box fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                My main stack is:\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h4.fontSize\" m={1}>\n                Python\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                Web Dev - Flask, Django\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                Deep Learning - Keras (TensorFlow)\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                Web Scraping - Scrapy, BeautifulSoup\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                API - FlaskRESTful, DjangoRESTframework\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                Databases - PostgreSQL, FireBase, MongoDB\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                Git, AWS, Serverless, Selenium, (Pylint, PyTest)\n              </Box>\n              <Divider />\n              <Box display=\"inline\" fontFamily=\"Monospace\" fontSize=\"h5.fontSize\" m={1}>\n                Sometimes I use React.js and Material-UI for Front-end\n              </Box>\n              <Divider />\n              <Box fontFamily=\"Monospace\" fontSize=\"h6.fontSize\" m={1}>\n                Since 2017 I'm very involved in Quant (Algorithmic) Trading, that's my hobby\n              </Box>\n              <Divider />\n           </Typography>\n\n           <Box component=\"span\" m={2}>\n              <Link href=\"https://www.linkedin.com/in/alex-bormotov\" color=\"inherit\">\n                <Icon className=\"fab fa-linkedin fa-fw fa-fw fa-fw\" />\n              </Link>\n              <Link href=\"https://github.com/alex-bormotov\" color=\"inherit\">\n                <Icon className=\"fab fa-github fa-fw fa-fw fa-fw\" />\n              </Link>\n              <Link href=\"https://medium.com/@alex_bormotov\" color=\"inherit\">\n                <Icon className=\"fab fa-medium fa-fw fa-fw fa-fw\" />\n              </Link>\n              <Link href=\"https://twitter.com/alex_bormotov\" color=\"inherit\">\n                <Icon className=\"fab fa-twitter fa-fw fa-fw fa-fw\" />\n              </Link>\n              <Link href=\"https://www.facebook.com/bormotov.eu\" color=\"inherit\">\n                <Icon className=\"fab fa-facebook fa-fw fa-fw fa-fw\" />\n              </Link>\n           </Box>\n          <Box component=\"span\" m={1}>\n            <Button disabled variant=\"contained\" color=\"primary\">\n              <Link href=\"mailto:alex.bormotov.work@gmail.com\" color=\"inherit\">\n                 Hire Me\n               </Link>\n            </Button>\n          </Box>\n        <Divider />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}